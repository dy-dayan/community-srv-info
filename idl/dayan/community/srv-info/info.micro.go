// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: info.proto

/*
Package dayan_community_srv_info is a generated protocol buffer package.

It is generated from these files:
	info.proto

It has these top-level messages:
	AddCommunityReq
	AddCommunityResp
	DelCommunityReq
	DelCommunityResp
	GetCommunityReq
	GetCommunityResp
*/
package dayan_community_srv_info

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/dy-dayan/community-srv-info/idl"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for CommunityInfo service

type CommunityInfoService interface {
	// 添加小区
	AddCommunity(ctx context.Context, in *AddCommunityReq, opts ...client.CallOption) (*AddCommunityResp, error)
	// 删除小区
	DelCommunity(ctx context.Context, in *DelCommunityReq, opts ...client.CallOption) (*DelCommunityResp, error)
	// 查看小区
	GetCommunity(ctx context.Context, in *GetCommunityReq, opts ...client.CallOption) (*GetCommunityResp, error)
}

type communityInfoService struct {
	c    client.Client
	name string
}

func NewCommunityInfoService(name string, c client.Client) CommunityInfoService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "dayan.community.srv.info"
	}
	return &communityInfoService{
		c:    c,
		name: name,
	}
}

func (c *communityInfoService) AddCommunity(ctx context.Context, in *AddCommunityReq, opts ...client.CallOption) (*AddCommunityResp, error) {
	req := c.c.NewRequest(c.name, "CommunityInfo.AddCommunity", in)
	out := new(AddCommunityResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityInfoService) DelCommunity(ctx context.Context, in *DelCommunityReq, opts ...client.CallOption) (*DelCommunityResp, error) {
	req := c.c.NewRequest(c.name, "CommunityInfo.DelCommunity", in)
	out := new(DelCommunityResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityInfoService) GetCommunity(ctx context.Context, in *GetCommunityReq, opts ...client.CallOption) (*GetCommunityResp, error) {
	req := c.c.NewRequest(c.name, "CommunityInfo.GetCommunity", in)
	out := new(GetCommunityResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CommunityInfo service

type CommunityInfoHandler interface {
	// 添加小区
	AddCommunity(context.Context, *AddCommunityReq, *AddCommunityResp) error
	// 删除小区
	DelCommunity(context.Context, *DelCommunityReq, *DelCommunityResp) error
	// 查看小区
	GetCommunity(context.Context, *GetCommunityReq, *GetCommunityResp) error
}

func RegisterCommunityInfoHandler(s server.Server, hdlr CommunityInfoHandler, opts ...server.HandlerOption) error {
	type communityInfo interface {
		AddCommunity(ctx context.Context, in *AddCommunityReq, out *AddCommunityResp) error
		DelCommunity(ctx context.Context, in *DelCommunityReq, out *DelCommunityResp) error
		GetCommunity(ctx context.Context, in *GetCommunityReq, out *GetCommunityResp) error
	}
	type CommunityInfo struct {
		communityInfo
	}
	h := &communityInfoHandler{hdlr}
	return s.Handle(s.NewHandler(&CommunityInfo{h}, opts...))
}

type communityInfoHandler struct {
	CommunityInfoHandler
}

func (h *communityInfoHandler) AddCommunity(ctx context.Context, in *AddCommunityReq, out *AddCommunityResp) error {
	return h.CommunityInfoHandler.AddCommunity(ctx, in, out)
}

func (h *communityInfoHandler) DelCommunity(ctx context.Context, in *DelCommunityReq, out *DelCommunityResp) error {
	return h.CommunityInfoHandler.DelCommunity(ctx, in, out)
}

func (h *communityInfoHandler) GetCommunity(ctx context.Context, in *GetCommunityReq, out *GetCommunityResp) error {
	return h.CommunityInfoHandler.GetCommunity(ctx, in, out)
}
